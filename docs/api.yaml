openapi: 3.1.0
x-stoplight:
  id: c9vjkvk4f45fu
info:
  title: Agent 与 Broker 节点对接文档
  version: '1.0'
  description: Agent 与 Broker 节点对接文档
  contact:
    name: ssoc
    url: 'https://github.com/vela-ssoc'
  termsOfService: 'https://github.com/vela-ssoc'
  summary: Agent 与 Broker 节点对接文档
  x-logo:
    url: logo.ico
tags:
  - name: Agent
    description: Agent 需要提供的接口
  - name: Broker
    description: Broker 需要提供的接口
servers:
  - url: /api/v1
    description: 基础路径
paths:
  /agent/task/diff:
    post:
      summary: 配置变更回调
      operationId: post-agent-task-diff
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskReport'
              examples:
                示例:
                  value:
                    tasks:
                      - id: 1133847578322
                        name: kafka
                        dialect: true
                        hash: 28f35476af08ba7d170529ec46484b98
                        uptime: '2023-05-23T02:42:26.968Z'
                        from: tunnel
                        runners:
                          - name: kafka.sub
                            type: kafka
                            status: running
      tags:
        - Agent
      description: 当中心端配置变更时，会调用 agent 的该接口
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDiff'
            examples:
              示例:
                value:
                  removes:
                    - 3415465343438593
                  updates:
                    - id: 45863228455684120
                      name: kafka
                      dialect: true
                      hash: 28f35476af08ba7d170529ec46484b98
                      chunk: cHJpbnQoIkhlbGxvIik=
  /agent/task/status:
    post:
      summary: 抓取 agent 上配置运行状态
      operationId: post-agent-task-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskReport'
              examples:
                示例:
                  value:
                    tasks:
                      - id: 1133847578322
                        name: kafka
                        dialect: true
                        hash: 28f35476af08ba7d170529ec46484b98
                        uptime: '2023-05-23T02:42:26.968Z'
                        from: tunnel
                        runners:
                          - name: kafka.sub
                            type: kafka
                            status: running
      tags:
        - Agent
      description: 抓取 agent 上配置运行状态
  /agent/third/diff:
    post:
      summary: 三方文件变更回调
      operationId: post-agent-third-diff
      responses:
        '200':
          description: OK
      tags:
        - Agent
      description: |
        `name`：代表哪个文件发生了变化，文件名唯一不会重复。
        `event`：变化类型，`delete` 代表文件删除；`update` 代表文件更新。

        当接受到文件变化通知时，agent 要自行判断是否用到了该文件，如果未用到该文件可忽略该通知。
        如果用到了该文件，可删除

        当文件发生修改时，中心端会通知 agent 哪个文件发生了修改。agent 收到通知时要先自行判断是否用到了该文件。如果没有用到可忽略该通知。如果用到了该文件，请中心端自行 [获取最新的三方文件](/operations/get-broker-third) 。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 发生变更的文件名
                event:
                  type: string
                  description: 事件类型 delete update
                  enum:
                    - delete
                    - update
              required:
                - name
                - event
            examples:
              示例:
                value:
                  name: ip2region.db
  /broker/third:
    get:
      summary: 下载三方文件
      tags:
        - Broker
      responses:
        '200':
          description: 文件流
        '304':
          description: 文件未改变
        '404':
          description: 文件不存在
      operationId: get-broker-third
      description: |
        下载三方文件

        ### 调用示例

        ```go
        tun.Attachment(ctx, "/api/v1/broker/third?name=hello.db&hash=8d1aefb3da150aef7151f061772a88de")
        ```
      parameters:
        - schema:
            type: string
          in: query
          name: name
          required: true
          description: 三方文件名字
        - schema:
            type: string
          in: query
          name: hash
          description: 文件 MD5
  /broker/stream/tunnel:
    get:
      summary: TCP 代理通道
      tags:
        - Broker
      responses: {}
      operationId: get-broker-stream-tunnel
      description: |
        TCP over websocket 流式代理通道。

        `address` 必须包含地址及端口号，例如：
        - 1.1.1.1:8989
        - example.com:80


        ### 调用

        ```go
        stm, err := tun.Stream(ctx, "/api/v1/broker/stream/tunnel?address=example.com:443", nil)
        ```
      parameters:
        - schema:
            type: string
            example: '172.31.61.168:9090'
          in: query
          name: address
          required: true
          description: 地址
components:
  schemas:
    TaskDiff:
      title: TaskDiff
      x-stoplight:
        id: ztigrtssizk6y
      type: object
      description: '中心端比对后返回的差异信息，请c[Go struct 定义]'
      properties:
        removes:
          type: array
          items:
            type: integer
        updates:
          type: array
          items:
            $ref: '#/components/schemas/TaskChunk'
      examples:
        - removes:
            - 89655745887242450000
          updates:
            - id: 789665585552788
              name: kafka
              dialect: true
              hash: 28f35476af08ba7d170529ec46484b98
              chunk: cHJpbnQoIkhlbGxvIik=
    TaskChunk:
      title: TaskChunk
      x-stoplight:
        id: ma43hfagscnvy
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        dialect:
          type: boolean
        hash:
          type: string
        chunk:
          type: string
      examples:
        - id: 7895536473673485
          name: kafka
          dialect: true
          hash: 28f35476af08ba7d170529ec46484b98
          chunk: cHJpbnQoIkhlbGxvIik=
    TaskRunner:
      title: TaskRunner
      x-stoplight:
        id: w11u8tn7n60xh
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        status:
          type: string
      examples:
        - name: kafka.sub
          type: kafka
          status: running
    TaskStatus:
      title: TaskStatus
      x-stoplight:
        id: mv0o6vtb7qsqy
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        dialect:
          type: boolean
        hash:
          type: string
        uptime:
          type: string
        from:
          type: string
        runners:
          type: array
          items:
            $ref: '#/components/schemas/TaskRunner'
      examples:
        - id: 1133847578322
          name: kafka
          dialect: true
          hash: 28f35476af08ba7d170529ec46484b98
          uptime: '2023-05-23T02:42:26.968Z'
          from: tunnel
          runners:
            - name: kafka.sub
              type: kafka
              status: running
    TaskReport:
      title: TaskReport
      x-stoplight:
        id: dvqomtdddc6j7
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskStatus'
      examples:
        - tasks:
            - id: 1133847578322
              name: kafka
              dialect: true
              hash: 28f35476af08ba7d170529ec46484b98
              uptime: '2023-05-23T02:42:26.968Z'
              from: tunnel
              runners:
                - name: kafka.sub
                  type: kafka
                  status: running
